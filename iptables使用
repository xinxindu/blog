iptables
链：PREROUTING、FORWARD、INPUT、OUTPUT、POSTROUTING
表：raw（上斜线PRE/OUT） > mangle（所有） > nat（上直角）> filter（倒三角）
数据包流向图：
	INPUT      					OUTPUT
					FORWARD		
	PREROUTING					POSTROUTING
报文流向：
	流入本机：PREROUTING，INPUT
	本机流出：OUTPUT，POSTROUTING
	转发：PREROUTING，FORWARD，POSTROUTING

规则格式： 
iptables 表 链 基本匹配 扩展匹配 执行动作
iptables [-t table] SUBCOMMAND chain [基本匹配] [-m match-name [per-match-options]] -j target-name [per-target-options]
	SUBCOMMAND:
		链管理：
			-N	new	自定义链
			-X  delete 自定义链
			-P	默认策略
				ACCEPT
				DROP
				REJECT ：拒绝	
			-E  重命名自定义链：引用计数不能为0的，不能重命名和删除

		规则管理：
			-A	apent，追加；
			-I	insert，插入，要指明地址，默认是第一条；
			-D	delete，删除：
					（1）指明规则号
					（2）指明规则本身
			-R	replace	替换指定链上的指定规则
					（1）指明规则号
			-F	flush，清空规则链；
			-Z	zero，置0
		查看：
			-L	list
				-n number，以数字格式显示地址和端口号；
				-v verbose，详细信息
				-x exactly，显示计数器的精确值
				--line-number 显示规则序号
				
	匹配条件
		基本匹配条件：
			[!] -s, --source address[/mask][,...]
			[!] -p, --protocol protocol
				protocol：tcp,udp, udplite, icmp, icmpv6,esp, ah, sctp, mh or "all"	
			[!] -d, --destination address[/mask][,...]
			[!] -i, --in-interface name
				数据包流入的接口：只能在PREROUTING、INPUT、FORWARD链
			[!] -o, --out-interface name
				数据包流入的接口：只能在POSTROUTING、OUTPUT、FORWARD链
			
			example：
				iptables -A OUTPUT -d 192.168.1.9 -p icmp -o eth0 -j DROP
		
		扩展匹配条件：需要加载扩展模块，方可生效；
			查询帮助信息, man iptables-extensions
			隐式扩展:不需要手动加载扩展模块；因为他们是对协议的扩展，所以，但凡使用了-p指明了协议，就表示已经指明了要扩展的模块；
				tcp：
					[!] --source-port,--sport port[:port] 匹配报文的源端口，可以是端口范围（first:last）
					[!] --destination-port,--dport port[:port]	匹配报文的目标端口，可以是端口范围（first:last）
					[!] --tcp-flags mask comp	mask必须要检查，comp表示必须为1
						Flags are: SYN ACK FIN SYN ACK FIN URG PSH ALL NONE
						例如：--tcp-flags SYN，ACK，FIN，SYN SYN    第一次握手
					[!] --syn	表示第一次握手
					[!] --tcp-option number
				udp：
					[!] --source-port,--sport port[:port]
					[!] --destination-port,--dport port[:port]
				icmp：
					[!] --icmp-type {type[/code]|typename}
						echo-request	8
						echo-reply		0
						例如： iptables -A INPUT -d 192.168.1.10 -p icmp --icmp-type 8 -j DROP
			
			显示扩展：必须指定加载扩展模块
				multiport
					[!] --source-ports,--sports port[,port|,port:port]...
					[!] --destination-ports,--dports port[,port|,port:port]...
					[!] --ports port[,port|,port:port]...
						例如：
							iptables -A INPUT -d 192.168.1.108 -s 192.168.1.1/24 -p tcp -m multiport --dports 22,80 -j ACCEPT
							iptables -A INPUT -d 192.168.1.108 -s 192.168.1.1/24 -p tcp -m multiport --dports 22,80:90 -j ACCEPT
				iprange：
					[!] --src-range from[-to]	例如，--src-range 192.168.1.100-192.168.1.150
					[!] --dst-range from[-to]
				string： 
					对报文中的应用层数据做字符串模式匹配检测;
					--algo {bm|kmp}
					--from offset	
						default is 0
					--to offset
						default is the packet size
					[!] --string pattern	字符串匹配
					[!] --hex-string pattern  十六进制的匹配
						例如：
						iptables -A INPUT -p tcp --dport 80 -m string --algo bm --string "gay" -j LOG
				time:
					根据报文到达时间与指定的时间范围进行匹配；
					--datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]
					--datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]
					--timestart hh:mm[:ss]
					--timestop hh:mm[:ss]
					[!] --weekdays day[,day...]
						Mon, Tue, Wed, Thu, Fri, Sat, Sun
					--kerneltz ,使用当前内核的时间
						Use the kernel timezone instead of UTC
					...
						例如：
						iptables -A INPUT -d 192.168.1.108 -s 192.168.1.1/24 -p tcp -m time --timestart 20:00 --timestop 23:00 --weekdays Sat,Sun -j LOG --log-prefix dxx-test222
				connlimit：
					根据客户端IP做并发连接数量匹配；
					--connlimit-upto n    
					--connlimit-above n
					例子：
					iptables -A INPUT -d 192.168.1.108 -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT
				limit：
					基于收发报文的速率做匹配；
					令牌桶过滤器(这次没有匹配到，就会暂时将令牌放到桶中，当匹配的报文过多时，可以将令牌桶中空闲的令牌发送，但是不能超过峰值值)
					--limit rate[/second|/minute|/hour|/day]，速率过滤器
					--limit-burst number，峰值过滤器
					例子：
					iptables -A INPUT -d 192.168.1.108 -p icmp --icmp-type 8 -m limit --limit 2/minute --limit-burst 5 -j ACCEPT
					iptables -A INPUT -d 192.168.1.108 -p icmp --icmp-type 8 -j DROP
				state：
					根据"连接追踪机制"去检查连接的状态（netfilter缓存）
					contract机制：追踪本机上的请求和响应的关系；状态有如下几种：
						NEW：新发出请求,连接追踪模板中不存在此连接相关信息条目，因此将其识别为第一次发出的请求
						ESTABLISHED：NEW状态之后，连接追踪模板中为其建立的条目失效之前期间内所进行的通信状态
						RELATED：相关连接，如ftp中的命令和数据连接
						INVALID：无效连接
						UNTRACKED：未进行追踪的连接
					[!] --state state
					例子
					22和80端口的连接追踪：
						iptables -A INPUT -d 192.168.1.9/32 -p tcp -m multiport --dports 22,80 -m state --state NEW,ESTABLISHED -j ACCEPT
						iptables -A OUTPUT -s 192.168.1.9 -p tcp -m multiport --sports 22,80 -m state --state ESTABLISHED -j ACCEPT
					
					开放被动模式的ftp：
					（1）装载ftp连接追踪的专用模块
						modprobe nf_contrack_ftp
						
					（2）放行命令连接
						iptables -R INPUT 2 -d 192.168.1.9 -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
						iptables -A OUTPUT -s 192.168.1.9 -p tcp --sport 21 -m state --state ESTABLISHED -j ACCEPT
					
					（3）放行数据连接
						iptables -A INPUT -d 192.168.1.9 -m state --state ESTABLISHED,RELATED -j ACCEPT
						iptables -A OUTPUT -s 192.168.1.9 -m state --state ESTABLISHED -j ACCEPT
					
					调整连接追踪功能所能容纳的最大连接数量：
						/proc/sys/net/nf_conntrack_max
					已经追踪到的并记录下来的连接:
						/proc/net/nf_conntrack
					不同的协议的连接追踪时长：
						/proc/net/netfilter/nf_log
						
					链接碰到各种状态的超时后会从表中删除，当模板满载时，后续的连接可能会超时
					解决方法：
						（1）加大nf_contrack_max值
							vi /etc/sysctl.conf
								net.ipv4.nf_conntrack_max
								net.ipv4.netfilter.nf_conntrack_max
								
						（2）降低nf_contrack timeout时间
							vi /etc/sysctl.conf
								net.ipv4.netfilter.nf_conntrack_tcp_timeout_established
								net.ipv4.netfilter.nf_conntrack_tcp_timeout_time_wait
								net.ipv4.netfilter.nf_conntrack_tcp_timeout_close_wait
								net.ipv4.netfilter.nf_conntrack_tcp_timeout_fin_wait
			
				规则优化：
					服务器设定：任何不允许的访问，应该在请求到达时给予拒绝；
					（1）可安全放行所有入站状态为ESTABLISHED状态的连接；
					（2）可安全放行所有出站状态为ESTABLISHED状态的连接；
					（3）谨慎放行入站的新请求；
					（4）有特殊目的限制访问功能，要于放行之前加以拒绝；
						
					
	处理动作
		-j target-name [per-target-options]
			ACCETP
			DROP
			REJECT：拒绝
			RETURN：返回调用链
			REDIRECT：端口重定义
			LOG：记录日志
				例如：
				iptables -A INPUT -d 192.168.1.108 -s 192.168.1.9 -p icmp --icmp-type 8 -j LOG --log-prefix dxx_test --log-level alert
				系统日志打印：Aug 19 20:17:49 dxx-VirtualBox kernel: [31540.512587] dxx_testIN=eth0 OUT= MAC=08:00:27:e4:f0:8d:08:00:27:bf:48:4a:08:00 SRC=192.168.1.9 DST=192.168.1.108 LEN=84 TOS=0x00 PREC=0x00 TTL=64 ID=15613 DF PROTO=ICMP TYPE=8 CODE=0 ID=19358 SEQ=5
				
			MARK：做防火墙标记
			DNAT：目标地址转换
			SNAT：源地址转换
			MASQUERADE：地址伪装
			...
		
